@page "/a/todos/completed"
@using Application.Todos.Commands.Create
@using Application.Todos.Commands.UpdateTodoCommand
@using Application.Todos.Queries.GetCompletedTodos
@using Application.Todos.Queries.GetInboxTodos
@using Core.Todos.Entities
@using Core.Todos.Enums
@using Core.Todos.Extensions
@using Core.Todos.Models
@using Humanizer
@using MediatR
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Core.Extensions
@layout TodoAppLayout
@rendermode InteractiveAuto
@attribute [Authorize]


@*
<TodoApp PageTitle="@PageTitle" 
         Todos="todos" 
         OnDelete="OnDeleteTodo" 
         OnEdit="OnEditTodo" 
         ApplicationUserId="@applicationUserId" />
*@


@code {
    [Inject]
    public IMediator Mediator { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? authenticationState { get; set; }

    [Inject]
    public IDialogService DialogService { get; set; }

    [Inject]
    public ISnackbar Snackbar { get; set; }

    // Private fields
    private List<Todo> todos = new List<Todo>();

    private string applicationUserId = string.Empty;

    private bool isSideMenuOpen = true;

    private const string PageTitle = "Completed";

    protected async override Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;
            if (user is not null)
            {
                applicationUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
                await LoadTodos();
            }
        }

        await base.OnInitializedAsync();
    }

    private async Task LoadTodos()
    {
        try
        {
            var query = new GetCompletedTodosQuery(applicationUserId);
            var result = await Mediator.Send(query);
            if (result.IsSuccess)
            {
                todos = result.Value.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        StateHasChanged();
    }

    private async Task OnToggleTodoComplete(bool value, Todo todo)
    {
        try
        {
            todo.IsCompleted = value;

            var command = new UpdateTodoCommand(todo, applicationUserId);

            var result = await Mediator.Send(command);

            if (result.IsSuccess)
            {
                await LoadTodos();

                if (todo.IsCompleted)
                {
                    Snackbar.Add("Todo completed", Severity.Success);
                }
            }
            else
            {
                Snackbar.Add("An error occurred", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        StateHasChanged();
    }

    private async Task OnCloseEditPanel(bool isUpdated)
    {
        if (isUpdated)
        {
            await LoadTodos();
            Snackbar.Add("Todo updated", Severity.Success);
        }

        StateHasChanged();
    }

    private async Task OnDeleteTodo()
    {
        await LoadTodos();
    }

    private async Task OnEditTodo(Todo todo)
    {
        await LoadTodos();
        StateHasChanged();
    }
}
