@using Core.Extensions
@using Core.Todos.Entities
@implements IDialogContentComponent<Todo>

<FluentDialogBody>
    <div class="card" style="display: flex; align-items: center; margin-bottom: 1rem;">
        <FluentCheckbox @bind-Value="Content.IsCompleted"  Style="margin-right: .5rem;"/>
        <FluentButton Id="editBtnDueDate"
                      IconStart="@(new Icons.Regular.Size16.Calendar())"
                      Title="Due date"
                      Appearance="Appearance.Lightweight"
                      @onclick="@(() => open = !open)">
            @if (Content.DueDate is not null)
            {
                @Content.DueDate.MenuSelectDisplay()
            }
            else
            {
                <span>Set due date</span>
            }
        </FluentButton>
        <FluentSpacer />
        <FluentButton IconStart="@(new Icons.Regular.Size16.Star())" Appearance="Appearance.Lightweight" Title="Important"/>
    </div>
    <div class="card" style="display: flex; margin-bottom: 1rem;">
        <FluentTextField Appearance="FluentInputAppearance.Filled" @bind-Value="Content.Title" Style="width: 100%; margin-right: .5rem;" />
        <FluentButton IconStart="@(new Icons.Regular.Size16.Flag())" Appearance="Appearance.Lightweight" Title="Urgency" />
    </div>

    <FluentMenu Anchor="editBtnDueDate" @bind-Open="open" HorizontalPosition="HorizontalPosition.Center">
        <h6 style="text-align: center; margin: .5rem 0;">Due</h6>
        <FluentDivider />
        <FluentMenuItem OnClick="SelectDueDateToday">
            Today
            <span slot="start" style="display: flex; align-items: center;">
                <FluentIcon Value="@(new Icons.Regular.Size16.CalendarToday())" Color="Color.Neutral" Slot="start" />
            </span>
        </FluentMenuItem>
        <FluentMenuItem OnClick="SelectDueDateTomorrow">
            <span slot="start" style="display: flex; align-items: center;">
                <FluentIcon Value="@(new Icons.Regular.Size16.CalendarAdd())" Color="Color.Neutral" Slot="start" />
            </span>
            Tomorrow
        </FluentMenuItem>
        <FluentMenuItem OnClick="SelectDueDateNextWeek">
            <span slot="start" style="display: flex; align-items: center;">
                <FluentIcon Value="@(new Icons.Regular.Size16.CalendarWorkWeek())" Color="Color.Neutral" Slot="start" />
            </span>
            Next week
        </FluentMenuItem>
        <FluentMenuItem id="btnCustomDueDate" OnClick="@((e) => dueDatePickerOpen = !dueDatePickerOpen)">
            <span slot="start" style="display: flex; align-items: center;">
                <FluentIcon Value="@(new Icons.Regular.Size16.CalendarSearch())" Color="Color.Neutral" Slot="start" />
            </span>
            Pick a date
        </FluentMenuItem>
        @if (Content.DueDate is not null)
        {
            <FluentDivider />
            <FluentMenuItem OnClick="@(() => Content.DueDate = null)">
                <span slot="start" style="display: flex; align-items: center;">
                    <FluentIcon Value="@(new Icons.Regular.Size16.CalendarCancel())" Color="Color.Warning" Slot="start" />
                </span>
                Clear
            </FluentMenuItem>
        }
    </FluentMenu>
    <FluentPopover AnchorId="editBtnDueDate" @bind-Open="dueDatePickerOpen" HorizontalPosition="HorizontalPosition.End">
        <Body>
            <FluentCalendar Value="@Content.DueDate" ValueChanged="OnDueDateSelected" DisabledDateFunc="@((DateTime date) => date < DateTime.UtcNow.AddDays(-1))" />
        </Body>
    </FluentPopover>
</FluentDialogBody>

@code {
    [Parameter]
    public Todo Content { get; set; } = default!;

    private DateTime? dueDate = null;

    private bool expanded = true;

    private bool dueDatePickerOpen = false;

    private bool open = false;

    private void OnDueDateSelected(DateTime? date)
    {
        Content.DueDate = date;
        dueDatePickerOpen = false;
        StateHasChanged();
    }

    private void SelectDueDateToday()
    {
        Content.DueDate = DateTime.Today;
        StateHasChanged();
    }

    private void SelectDueDateTomorrow()
    {
        Content.DueDate = DateTime.Today.AddDays(1);
        StateHasChanged();
    }

    private void SelectDueDateNextWeek()
    {
        Content.DueDate = DateTime.Today.AddDays(7);
        StateHasChanged();
    }
}
